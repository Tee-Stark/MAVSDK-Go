// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServiceClient interface {
	// Subscribe to 'connection state' updates.
	SubscribeConnectionState(ctx context.Context, in *SubscribeConnectionStateRequest, opts ...grpc.CallOption) (CoreService_SubscribeConnectionStateClient, error)
	// Get a list of currently running plugins.
	ListRunningPlugins(ctx context.Context, in *ListRunningPluginsRequest, opts ...grpc.CallOption) (*ListRunningPluginsResponse, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) SubscribeConnectionState(ctx context.Context, in *SubscribeConnectionStateRequest, opts ...grpc.CallOption) (CoreService_SubscribeConnectionStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CoreService_serviceDesc.Streams[0], "/mavsdk.rpc.core.CoreService/SubscribeConnectionState", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreServiceSubscribeConnectionStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreService_SubscribeConnectionStateClient interface {
	Recv() (*ConnectionStateResponse, error)
	grpc.ClientStream
}

type coreServiceSubscribeConnectionStateClient struct {
	grpc.ClientStream
}

func (x *coreServiceSubscribeConnectionStateClient) Recv() (*ConnectionStateResponse, error) {
	m := new(ConnectionStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreServiceClient) ListRunningPlugins(ctx context.Context, in *ListRunningPluginsRequest, opts ...grpc.CallOption) (*ListRunningPluginsResponse, error) {
	out := new(ListRunningPluginsResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.core.CoreService/ListRunningPlugins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
type CoreServiceServer interface {
	// Subscribe to 'connection state' updates.
	SubscribeConnectionState(*SubscribeConnectionStateRequest, CoreService_SubscribeConnectionStateServer) error
	// Get a list of currently running plugins.
	ListRunningPlugins(context.Context, *ListRunningPluginsRequest) (*ListRunningPluginsResponse, error)
}

// UnimplementedCoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCoreServiceServer struct {
}

func (*UnimplementedCoreServiceServer) SubscribeConnectionState(*SubscribeConnectionStateRequest, CoreService_SubscribeConnectionStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeConnectionState not implemented")
}
func (*UnimplementedCoreServiceServer) ListRunningPlugins(context.Context, *ListRunningPluginsRequest) (*ListRunningPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunningPlugins not implemented")
}

func RegisterCoreServiceServer(s *grpc.Server, srv CoreServiceServer) {
	s.RegisterService(&_CoreService_serviceDesc, srv)
}

func _CoreService_SubscribeConnectionState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeConnectionStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServiceServer).SubscribeConnectionState(m, &coreServiceSubscribeConnectionStateServer{stream})
}

type CoreService_SubscribeConnectionStateServer interface {
	Send(*ConnectionStateResponse) error
	grpc.ServerStream
}

type coreServiceSubscribeConnectionStateServer struct {
	grpc.ServerStream
}

func (x *coreServiceSubscribeConnectionStateServer) Send(m *ConnectionStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreService_ListRunningPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunningPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListRunningPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.core.CoreService/ListRunningPlugins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListRunningPlugins(ctx, req.(*ListRunningPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.core.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRunningPlugins",
			Handler:    _CoreService_ListRunningPlugins_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeConnectionState",
			Handler:       _CoreService_SubscribeConnectionState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core.proto",
}
